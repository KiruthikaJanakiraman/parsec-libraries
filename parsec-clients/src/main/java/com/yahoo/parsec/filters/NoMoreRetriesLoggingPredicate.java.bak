package com.yahoo.parsec.filters;

import com.ning.http.client.Request;
import com.yahoo.parsec.clients.ParsecClientDefine;
import org.apache.commons.lang3.math.NumberUtils;

import java.util.List;
import java.util.function.BiPredicate;

/**
 *
 *
 * Created by baiyi on 11/02/2018.
 */
public class NoMoreRetriesLoggingPredicate implements BiPredicate<Request, NingResponseOrThrowable> {
    @Override
    public boolean test(Request request, NingResponseOrThrowable responseOrThrowable) {
        int requestCount = NumberUtils.toInt(request.getHeaders()
                .getFirstValue(ParsecClientDefine.HEADER_PROFILING_REQUEST_COUNT));

        int maxRetries = NumberUtils.toInt(request.getHeaders()
                .getFirstValue(ParsecClientDefine.HEADER_PROFILING_REQUEST_MAX_RETRIES));

        List<String> retryCodeStrs = request.getHeaders().get(ParsecClientDefine.HEADER_PROFILING_RETRY_STATUS_CODES);
        boolean matchingRetryCode = responseOrThrowable.getResponse() != null
                && retryCodeStrs.contains(String.valueOf(responseOrThrowable.getResponse().getStatusCode()));

        List<String> retryExpStrs = request.getHeaders().get(ParsecClientDefine.HEADER_PROFILING_RETRY_EXCEPTIONS);
        boolean matchingRetryExp = responseOrThrowable.getThrowable() != null
                && retryExpStrs.contains(responseOrThrowable.getThrowable().getCause().getClass().getName());

        boolean shouldRetry = (matchingRetryCode && requestCount < maxRetries)
                || (matchingRetryExp && requestCount < maxRetries);


        return !shouldRetry;
    }
}
